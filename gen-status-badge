#!/bin/sh

help(){
  cat <<EOF
usage: `basename $0` -o <PATH of generated badge> [-s <STATUS>] [-l <LABEL>] [-c <COLOR>]

Generate a status badge.

arguments:
  -o <PATH>: path where to put the generated badge
  -s <STATUS>: Status part of the badge 
  -l <LABEL>: Label of the badge
  -c <COLOR>: RGB color code
    if -s 'ok' is passed, default color is green (#33cc33)
    if -s 'ko' is passed, default color is red (#cc3300)
    otherwise the default color is black (#000000)
EOF
  exit 0
}

exit_error(){
    printf "%s\n" "$1"
    exit 1
}

while getopts ":ho:s:l:c:" opt; do
  case $opt in
    h)  help;;
    o)  OUT_PATH="$OPTARG";;
    l)  LABEL="$OPTARG";;
    s)  STATUS="$OPTARG";;
    c)  COLOR="$OPTARG";;
    \?) echo "Invalid option: -$OPTARG" >&2 ;help; exit 1 ;;
    :)  echo "Option -$OPTARG requires an argument." >&2; help; exit 1;;
  esac
done


if [ "$STATUS" = 'ok' ] && [ "$COLOR" = "" ]
then
    COLOR="#33cc33"
elif [ "$STATUS" = 'ko' ] && [ "$COLOR" = "" ]
then
    COLOR='#cc3300'
elif [ "$COLOR" = "" ]
then
    COLOR='#000000'
fi

# Check if the color is actually a proper RGB definition
if ! printf '%s' "$COLOR" | grep -qe  '^#[0-9A-Fa-f]\{6\}$' &&
   ! printf '%s' "$COLOR" | grep -qe  '^#[0-9A-Fa-f]\{3\}$'
then
    exit_error "COLOR doesn't match an RGB definition\
 (either #XXX or #XXXXXX with X an hexa value)"
fi

# Check that the output directory is passed and does exist
[ "$OUT_PATH" = "" ] && exit_error "Missing mandatory argument -o <PATH/TO/BADGE.svg>"
[ -d "`dirname $OUT_PATH`" ] || exit_error "output directory doesn't exist"

len(){
    printf "%s" "$1" | wc -c
}

cdata_escape(){
    printf "%s" "$1" | sed 's/]]>/]]]]><![CDATA[>/g'
}

hex2dec(){
    printf "%d" "$((0x$1))"
}

is_3DIGIT_RGB(){
    [ `len "$1"` -eq 4 ]
}

getR(){
    if is_3DIGIT_RGB "$1"
    then
        echo "$1" | sed 's/^.\(.\)../\10/'
    else
        echo "$1" | sed 's/^.\(..\)..../\1/'
    fi
}

getG(){
    if is_3DIGIT_RGB "$1"
    then
        echo "$1" | sed 's/^..\(.\)./\10/'
    else
        echo "$1" | sed 's/^...\(..\)../\1/'
    fi
}

getB(){
    if is_3DIGIT_RGB "$1"
    then
        echo "$1" | sed 's/^...\(.\)/\10/'
    else
        echo "$1" | sed 's/^.....\(..\)/\1/'
    fi
}

# Compute brightness of an RGB color according to the LUMA formula (* 1000 as sh is integer only)
brightness(){
    R=$(hex2dec "$(getR "$1")")
    G=$(hex2dec "$(getG "$1")")
    B=$(hex2dec "$(getB "$1")")
    echo $(( 2126 * $R + 7152 * $G + 722 * $B ))
}

# Compute the "brightness" to determine if we should use black or white for the label
BRIGHT=`brightness "$COLOR"`

# Choose the text color according to the brightness
# 1280000 is the brightness of "#808080" aka gray, seems like a good threshold to switch color
if [ $BRIGHT -lt 1280000 ]
then
    TEXT_COLOR="#fff"
    SHADOW_COLOR="#010101"
else
    TEXT_COLOR="#000"
    SHADOW_COLOR="#fefefe"
fi

# Compute the width of the badge according from label and status string lenght
WIDTH=$(( (`len "$STATUS"` + `len "$LABEL"`) * 7 + 20 ))
LABEL_WIDTH=$(( (`len "$LABEL"`) * 7 + 10 ))
STATUS_WIDTH=$(( $WIDTH - $LABEL_WIDTH  ))
LABEL_LEN=$(( `len "$LABEL"` * 10  * 7))
LABEL_X=$(( $LABEL_WIDTH / 2 * 10 ))
STATUS_X=$(( ( $LABEL_WIDTH + $STATUS_WIDTH / 2 ) * 10 ))
STATUS_LEN=$(( `len "$STATUS"` * 10  * 7 ))

# escape end tag of CDATA
STATUS="`cdata_escape "$STATUS"`"
LABEL="`cdata_escape "$LABEL"`"

cat >${OUT_PATH} <<EOF
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${WIDTH}" height="20">
<linearGradient id="b" x2="0" y2="100%">
    <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
    <stop offset="1" stop-opacity=".1"/>
</linearGradient>
<clipPath id="a">
    <rect width="${WIDTH}" height="20" rx="3" fill="#fff"/>
</clipPath>
<g clip-path="url(#a)">
    <path fill="#555" d="M0 0h${LABEL_WIDTH}v20H0z"/>
    <path fill="${COLOR}" d="M${LABEL_WIDTH} 0h${STATUS_WIDTH}v20H${LABEL_WIDTH}z"/>
    <path fill="url(#b)" d="M0 0h${WIDTH}v20H0z"/>
</g>
<g text-anchor="middle" font-family="DejaVu Sans,Verdana,Geneva,sans-serif" font-size="110">
    <text x="${LABEL_X}" y="150" fill="#010101" fill-opacity=".3" transform="scale(.1)" textLength="${LABEL_LEN}"><![CDATA[${LABEL}]]></text>
    <text x="${LABEL_X}" y="140" fill="#fff" transform="scale(.1)" textLength="${LABEL_LEN}"><![CDATA[${LABEL}]]></text>
    <text x="${STATUS_X}" y="150" fill="${SHADOW_COLOR}" fill-opacity=".3" transform="scale(.1)" textLength="${STATUS_LEN}"><![CDATA[${STATUS}]]></text>
    <text x="${STATUS_X}" y="140" fill="${TEXT_COLOR}"  transform="scale(.1)" textLength="${STATUS_LEN}"><![CDATA[${STATUS}]]></text>

</g>
</svg>
EOF
